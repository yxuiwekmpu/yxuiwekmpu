package org.coderfun.fieldmeta.controller.admin;



import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.coderfun.common.exception.AppException;
import org.coderfun.common.exception.ErrorCodeEnum;
import org.coderfun.config.WebRes;
import org.coderfun.fieldmeta.entity.TemplateFile;
import org.coderfun.fieldmeta.service.TemplateFileService;
import org.coderfun.gen.service.GenService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import klg.common.utils.FileTools;
import klg.j2ee.common.model.EasyUIPage;
import klg.j2ee.common.model.JsonData;



/**
 *
 * 
 * Generated by fieldmeta at 2019-08-10T13:41:41+08:00
 *
 */

@Controller("adminTemplateFileController")
@RequestMapping("/admin/action/templatefile")
public class TemplateFileController {
	private static final Logger logger = LoggerFactory.getLogger(TemplateFileController.class);
	
	@Autowired
	WebRes webRes;
	
	@Autowired
	TemplateFileService templateFileService;
	
	@ResponseBody
	@RequestMapping("/add")
	public JsonData add(
			@ModelAttribute TemplateFile templateFile){
		
		templateFileService.save(templateFile);
		return JsonData.success();
	}
	
	
	@ResponseBody
	@RequestMapping("/edit")
	public JsonData edit(
			@ModelAttribute TemplateFile templateFile){
		
		templateFileService.update(templateFile);
		return JsonData.success();
	}
	
	@ResponseBody
	@RequestMapping("/delete")
	public JsonData delete(
			@RequestParam Long id){
    	TemplateFile templateFile = templateFileService.getById(id);
    	String filePath = webRes.getAbsolutePath() + GenService.TEMPLATE_DIR_KEY+ templateFile.getUuidName();
		
    	File file = new File(filePath);
    	file.delete();
    	
		templateFileService.delete(id);
		return JsonData.success();
	}
	
	@ResponseBody
	@RequestMapping("/findpage")
	public EasyUIPage findpage(
			@ModelAttribute TemplateFile templateFile,
			@RequestParam int page,
			@RequestParam int rows){
		Pageable pageable=new PageRequest(page<1?0:page-1, rows, new Sort(Direction.DESC,"id"));
		Page<TemplateFile> pageData=templateFileService.findPage(templateFile, pageable);
		return new EasyUIPage(pageData);
	}
	
	@ResponseBody
	@RequestMapping("/findlist")
	public JsonData findlist(
			@ModelAttribute TemplateFile templateFile){
		
		List<TemplateFile> listData=templateFileService.findList(templateFile, new Sort(Direction.DESC,"id"));
		return JsonData.success(listData);
	}
	
    @PostMapping("/upload")
    @ResponseBody
    public JsonData upload(@RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            throw new AppException(ErrorCodeEnum.FILE_UPLOAD_FAILD);
        }
        
        String fileName = file.getOriginalFilename();
        String uuidName = FileTools.createUUIDName(new File(fileName));
        String realFilePath =  GenService.TEMPLATE_DIR_KEY + uuidName;
        
        File dir = new File(webRes.getAbsolutePath() + GenService.TEMPLATE_DIR_KEY);
        if(!dir.exists()){
        	dir.mkdirs();
        }
        File dest = new File(webRes.getAbsolutePath() + realFilePath);
        try {
            file.transferTo(dest);
            logger.info("上传成功");
            return JsonData.success(uuidName);
        } catch (IOException e) {
            logger.error(e.toString(), e);
        }
        throw new AppException(ErrorCodeEnum.FILE_UPLOAD_FAILD);
    }
	
    @RequestMapping("/tpfDownload")
    @ResponseBody
    public JsonData tpfDownload(Long tpfId, HttpServletResponse response){
    	TemplateFile templateFile = templateFileService.getById(tpfId);
    	String filePath = webRes.getAbsolutePath() + GenService.TEMPLATE_DIR_KEY + templateFile.getUuidName();
    	try {
			download(filePath, templateFile.getName(), response);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace(); 
			throw new AppException(ErrorCodeEnum.FILE_DOWNLOAD_FAILD);
		}
    	return JsonData.success();
    }
    
    
	/**
	 * 文件下载，需要一个文件的InputStream
	 * @param inStream
	 * @param response
	 * @throws IOException 
	 */
	public static void download(String filePath, String fileName,HttpServletResponse response) throws IOException{
		File file = new File(filePath);
		response.addHeader("Content-Disposition", "attachment;filename=" + fileName);
		response.addHeader("Content-Length", "" + file.length());
		InputStream inStream = new FileInputStream(file);
		OutputStream os = response.getOutputStream();
		byte buf[] = new byte[2048];
		int read;
		while ((read = inStream.read(buf)) != -1) {
			os.write(buf, 0, read);
		}
		inStream.close();
	}
    
}
