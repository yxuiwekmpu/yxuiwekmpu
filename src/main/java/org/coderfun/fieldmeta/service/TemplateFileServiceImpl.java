package org.coderfun.fieldmeta.service;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.coderfun.common.exception.AppException;
import org.coderfun.common.exception.ErrorCodeEnum;
import org.coderfun.config.WebRes;
import org.coderfun.fieldmeta.dao.TemplateFileDAO;
import org.coderfun.fieldmeta.entity.TemplateFile;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import klg.j2ee.common.dataaccess.BaseServiceImpl;

/**
 *
 * 
 * Generated by fieldmeta at 2019-08-10T13:41:41+08:00
 *
 */

@Service
public class TemplateFileServiceImpl extends BaseServiceImpl<TemplateFile, Long> implements TemplateFileService {
	@Autowired
	TemplateFileDAO templateFileDAO;

	@Autowired
	WebRes webRes;

	@Transactional
	@Override
	public TemplateFile save(TemplateFile templateFile) {
		// TODO Auto-generated method stub
		moveTpf(templateFile);
		return super.save(templateFile);
	}

	@Transactional
	@Override
	public TemplateFile update(TemplateFile templateFile) {
		// TODO Auto-generated method stub
		if (templateFile.getUuidName() != null) {
			moveTpf(templateFile);
		} else {
			TemplateFile old = getById(templateFile.getId());
			if (!old.getDir().equals(templateFile.getDir())) {
				File source = new File(getRealPath(old));
				File target = new File(getRealPath(templateFile));
				try {
					FileUtils.moveFile(source, target);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new AppException(ErrorCodeEnum.NEED_RE_UPLOAD);
				}
			}
		}

		return super.update(templateFile);
	}

	@Override
	public void delete(Long id) {
		// TODO Auto-generated method stub
		TemplateFile templateFile = getById(id);
		String filePath = getRealPath(templateFile);

		File file = new File(filePath);
		file.delete();
		super.delete(id);
	}

	private void moveTpf(TemplateFile templateFile) {
		File source = new File(getUploadTempDir() + templateFile.getUuidName());
		File target = new File(getRealPath(templateFile));
		try {
			FileUtils.moveFile(source, target);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new AppException(ErrorCodeEnum.NEED_RE_UPLOAD);
		}
	}

	@Override
	public String getRealPath(TemplateFile templateFile) {
		// TODO Auto-generated method stub
		String dirPath = webRes.getAbsolutePath() + TEMPLATE_DIR_KEY + templateFile.getDir();

		File dir = new File(dirPath);
		if (!dir.exists()) {
			dir.mkdirs();
		}

		return dirPath + templateFile.getName();
	}

	@Override
	public String getUploadTempDir() {
		// TODO Auto-generated method stub
		String uploadTempDir = webRes.getAbsolutePath() + UPLOAD_TEMP_DIR_KEY;

		File dir = new File(uploadTempDir);
		if (!dir.exists()) {
			dir.mkdirs();
		}
		return uploadTempDir;
	}

	/**
	 * 文件下载，需要一个文件的InputStream
	 * 
	 * @param inStream
	 * @param response
	 * @throws IOException
	 */
	public static void download(String filePath, String fileName, HttpServletResponse response) throws IOException {
		File file = new File(filePath);
		response.addHeader("Content-Disposition", "attachment;filename=" + fileName);
		response.addHeader("Content-Length", "" + file.length());
		InputStream inStream = new FileInputStream(file);
		OutputStream os = response.getOutputStream();
		byte buf[] = new byte[2048];
		int read;
		while ((read = inStream.read(buf)) != -1) {
			os.write(buf, 0, read);
		}
		inStream.close();
	}

	@Override
	public byte[] getAllFilesByZip() throws IOException {
		// TODO Auto-generated method stub
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		ZipOutputStream zip = new ZipOutputStream(outputStream);
		List<TemplateFile> templateFiles = findAll();
		for (TemplateFile templateFile : templateFiles) {
			String filePath = templateFile.getDir() + templateFile.getName();
			if (filePath.startsWith("/")) {
				filePath = filePath.substring(1);
			}
			zip.putNextEntry(new ZipEntry(filePath));
			byte[] data = IOUtils.toByteArray(new FileInputStream(new File(getRealPath(templateFile))));
			IOUtils.write(data, zip);
			zip.closeEntry();

		}
		IOUtils.closeQuietly(zip);
		return outputStream.toByteArray();
	}

}
